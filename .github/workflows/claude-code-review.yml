name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    if: contains(github.event.pull_request.labels.*.name, 'ai-review')
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            REPO: ${{ github.repository }}
            PR NUMBER: ${{ github.event.pull_request.number }}

            You are a senior engineer. Perform a comprehensive code review focusing on the following areas.
            Follow Sandi Metz’s rules for writing clean, maintainable, and object-oriented Ruby code, prioritizing simplicity, small classes and methods, and clear responsibilities.

            1. **Code Quality**
              - Adhere to Sandi Metz’s rules (small classes, small methods, single responsibility, clear boundaries)
              - Clean code principles and Ruby best practices
              - Proper error handling and edge cases
              - Code readability and maintainability

            2. **Security**
              - Check for potential security vulnerabilities
              - Validate input sanitization
              - Review authentication/authorization logic

            3. **Performance**
              - Identify potential performance bottlenecks
              - Review database queries for efficiency
              - Check for memory leaks or resource issues

            4. **Testing**
              - Verify adequate test coverage
              - Review test quality and edge cases
              - Check for missing test scenarios

            5. **Documentation**
              - Ensure code is properly documented
              - Verify README updates for new features
              - Check API documentation accuracy

            ### Output Requirements
            - Generate a GitHub comment that provides a high-level summary of the review results.
            - Use a checklist format for each focus area.
            - If a focus area is **satisfactory**, use a checked checkbox (e.g., `- [x]`).
            - If a focus area has **critical findings or issues**, use an unchecked checkbox (e.g., `- [ ]`) and briefly describe the issue.
            - Do not include detailed inline comments or lengthy prose.

            **Example Output:**
            
            ### Code Review Summary for PR #${{ github.event.pull_request.number }}

            **Code Quality**
            - [x] Adheres to Sandi Metz’s rules and Ruby best practices.
            - [ ] **Critical Finding:** Error handling is missing in the `process_payment` method.

            **Security**
            - [x] Input sanitization is valid.

            **Performance**
            - [ ] Database queries are inefficient.

            **Testing**
            - [x] Adequate test coverage and quality.
            - [ ] **Missing Test Scenarios:** Edge cases for user authentication are not tested.

            **Documentation**
            - [x] Code is properly documented.

            ---
            *Note: For more details, please review the specific issues raised in the PR files.*
          # See https://github.com/anthropics/claude-code-action/blob/main/docs/usage.md
          # or https://docs.anthropic.com/en/docs/claude-code/sdk#command-line for available options
          claude_args: '--allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'
